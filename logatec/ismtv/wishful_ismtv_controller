#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
wishful_ismtv_controller.py: First implementation of WiSHFUL controller

Usage:
   wishful_ismtv_controller.py [options] [-q | -v]

Options:
   --logfile name      Name of the logfile
   --config configFile Config file path

Example:
   ./wishful_ismtv_controller -v --config ./config.yaml 

Other options:
   -h, --help          show this help message and exit
   -q, --quiet         print less text
   -v, --verbose       print more text
   --version           show version and exit
"""

import sys
import datetime
import logging
import wishful_controller
import gevent
import yaml
import numpy
from matplotlib import pyplot
import wishful_upis as upis

__author__ = "Piotr Gawlowicz, Mikolaj Chwalisz"
__copyright__ = "Copyright (c) 2015, Technische Universit√§t Berlin"
__version__ = "0.1.0"
__email__ = "{gawlowicz, chwalisz}@tkn.tu-berlin.de"


log = logging.getLogger('wishful_agent.main')
controller = wishful_controller.Controller()
nodes = []


@controller.new_node_callback()
def new_node(node):
    nodes.append(node)
    print("New node appeared:")
    print(node)


@controller.node_exit_callback()
def node_exit(node, reason):
    if node in nodes:
        nodes.remove(node);
    print("NodeExit : NodeID : {} Reason : {}".format(node.id, reason))


@controller.set_default_callback()
def default_callback(group, node, cmd, data):
    print("{} DEFAULT CALLBACK : Group: {}, NodeName: {}, Cmd: {}, Returns: {}".format(datetime.datetime.now(), group, node.name, cmd, data))


@controller.add_callback(upis.radio.set_channel)
def set_channel_reponse(group, node, data):
    print("{} set_channel_reponse : Group:{}, NodeId:{}, msg:{}".format(datetime.datetime.now(), group, node.id, data))
    controller.delay(3).node(node.id).net.create_packetflow_sink(port=1234)


@controller.add_callback(upis.radio.get_channel)
def get_channel_reponse(group, node, data):
    print("{} get_channel_reponse : Group:{}, NodeId:{}, msg:{}".format(datetime.datetime.now(), group, node.id, data))

def print_response_sensor(group, node, data):
    print("{} Print response : Group:{}, NodeIP:{}".format(datetime.datetime.now(), group, node.ip))

    f_mhz = numpy.array(data['frequency']) / 1e6

    pyplot.clf()
    pyplot.grid()
    pyplot.xlabel("frequency [MHz]")
    pyplot.ylabel("power [dBm]")

    # Plot data
    pyplot.plot(f_mhz, data['power'])

    pyplot.axis([min(f_mhz), max(f_mhz), -110, -50])
    pyplot.show(block=False)
    pyplot.pause(0.001)

def print_response_generic(group, node, data):
    print("{} Print response : Group:{}, NodeIP:{}, Result:{}".format(datetime.datetime.now(), group, node.ip, data))

def main(args):
    log.debug(args)

    config_file_path = args['--config']
    config = None
    with open(config_file_path, 'r') as f:
        config = yaml.load(f)

    controller.load_config(config)
    controller.start()
    start = True
   
    #control loop
    while True:
        gevent.sleep(30)
        print("\n")
        print("Connected nodes", [str(node.name) for node in nodes])
        if nodes:
            if start:
                start = False
                controller.callback(print_response_generic).node(nodes[0]).radio.iface("ismtv").get_radio_info("sensor")
                controller.callback(print_response_generic).node(nodes[0]).radio.iface("ismtv").get_radio_info("generator")

            controller.callback(print_response_sensor).node(nodes[0]).radio.iface("ismtv").get_measurements([868.3e6, 919.0e6, 400e3])
            controller.callback(print_response_generic).node(nodes[0]).radio.iface("ismtv").play_waveform(iface=10, freq=869e6, power_lvl=-10)



if __name__ == "__main__":
    try:
        from docopt import docopt
    except:
        print("""
        Please install docopt using:
            pip install docopt==0.6.1
        For more refer to:
        https://github.com/docopt/docopt
        """)
        raise

    args = docopt(__doc__, version=__version__)

    log_level = logging.INFO  # default
    if args['--verbose']:
        log_level = logging.DEBUG
    elif args['--quiet']:
        log_level = logging.ERROR

    logfile = None
    if args['--logfile']:
        logfile = args['--logfile']

    logging.basicConfig(filename=logfile, level=log_level,
        format='%(asctime)s - %(name)s.%(funcName)s() - %(levelname)s - %(message)s')

    try:
        main(args)
    except KeyboardInterrupt:
        log.debug("Controller exits")
    finally:
        log.debug("Exit")
        controller.stop()
